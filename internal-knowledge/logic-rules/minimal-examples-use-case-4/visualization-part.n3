@prefix dashb: <http://dynamicdashboard.ilabt.imec.be/broker/ontologies/dashboard#> .
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>.
@prefix math: <http://www.w3.org/2000/10/swap/math#>.
@prefix time: <http://www.w3.org/2006/time#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# Visualizations can have as window either an instant (if they can visualize realtime data) or a time interval (if they can visualize historical data):

{
    ?widget dashb:timeWindow ?window.
    ?window a time:Instant.

    ?visualization a dashb:RealtimeDataVisualization.
}
=>
{
    ?visualization dashb:window ?window.
}.

# When the visualization accepts a list of data inputs and a serice (e.g. aggregator) produces a lists of data outputs, check the data inputs in both lists one by one, 
# if they match, register the data input as partially supported. If all data inputs were partially supported by the visualization component, the component states that it fully supports the list of data inputs.

{
    ?visualization a dashb:Visualization;
        dashb:component ?component.
    ?component dashb:accepts ?list.

    ?list rdf:first [ ?p ?val ].
    ?dataSource dashb:produces ?dataSourceList.
    ?dataSourceList rdf:first [ ?p ?val ].

    ?list rdf:rest ?rest.
    ?dataSourceList rdf:rest ?dataSourceRest.
}
=>
{
    ?component dashb:partialSupport (?dataSource ?rest ?dataSourceRest).
}.

{
    ?component dashb:partialSupport (?dataSource ?list ?dataSourceList).

    ?list rdf:first [ ?p ?val ].
    ?dataSourceList rdf:first [ ?p ?val ].

    ?list rdf:rest ?rest.
    ?dataSourceList rdf:rest ?dataSourceRest.
}
=>
{
    ?component dashb:partialSupport (?dataSource ?rest ?dataSourceRest).
}.

{
    ?component dashb:partialSupport (?dataSource () ()).
}
=>
{
    ?component dashb:supports ?dataSource.
}.

# If a visualization can process a window,
# and its components support a number of data sources (e.g. sensor properties) < a configured maximum and >= a configured minimum,
# then the component can visualize the data source:

{
    ?widget dashb:dataSource ?dataSource.

    ?visualization a dashb:Visualization;
        dashb:component ?component;
        dashb:window ?window.

    ?component dashb:supports ?dataSource;
        dashb:max ?max.

    # Verify that the number of ?dataSource supported by ?component does indeed not exceed ?max:
    [] e:findall ( ?s { ?component dashb:source ?s } ?dataSources) .
    ?dataSources math:memberCount ?length.
    ?length math:lessThan ?max.
}
=>
{
    ?component dashb:source ?dataSource.
}.

{
    ?visualization dashb:source ?dataSource.
}
<=
{
    ?visualization a dashb:Visualization;
        dashb:component ?component.
    ?component dashb:source ?dataSource;
        dashb:min ?min.

    [] e:findall ( ?s { ?component dashb:source ?s } ?dataSources) .
    ?dataSources math:memberCount ?length.
    ?length math:notLessThan ?min.
}.

{
    ?widget dashb:dataSource ?dataSource ;
        dashb:timeWindow ?window .
    ?visualization a dashb:Visualization ;
        dashb:source ?dataSource .
}
=>
{
    ?widget dashb:candidateVisualization ?visualization .
}.
